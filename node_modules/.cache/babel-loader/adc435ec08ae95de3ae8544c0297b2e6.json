{"ast":null,"code":"var _jsxFileName = \"/home/merve/Desktop/math_game/src/context/Context.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext } from 'react';\nimport { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Context = /*#__PURE__*/createContext();\n\nconst Provider = props => {\n  _s();\n\n  const [operator, setOperator] = useState(\"\");\n  const [points, setPoints] = useState(0);\n  const [tour, setTour] = useState(0);\n  const [questions, setQuestions] = useState([]);\n  const [questionCount, setQuestionCount] = useState(0);\n  const [btnClicked, setBtnClicked] = useState(null);\n  const navigate = useNavigate();\n\n  const startGame = () => {\n    if (!operator) {\n      return;\n    }\n\n    if (operator) {\n      setTour(tour + 1);\n      navigate('/play');\n    }\n  };\n\n  const createQuestions = operator => {\n    const newArr = [];\n\n    for (let i = 0; i < 10; i++) {\n      if (operator === 'add') {\n        newArr.push(addQuestion('add'));\n      } else if (operator === 'substract') {// newArr.push(substractQuestion());\n      } else if (operator === 'multiply') {// newArr.push(multiplyQuestion());\n      } else if (operator === 'divide') {// newArr.push(divideQuestion());\n      }\n    }\n\n    setQuestions(newArr);\n  };\n\n  const randomNumber = (lowerLimit, upperLimit) => {\n    return Math.floor(Math.random() * upperLimit) + lowerLimit;\n  }; //creating addition questions\n\n\n  const addQuestion = operator => {\n    let num1 = randomNumber(1, 98);\n    let num2 = randomNumber(1, 98 - num1);\n    let result = num1 + num2;\n    let choicesArr = [result + 2, result + 5, result]; // console.log(choicesArr);\n\n    let choices = choicesArr.sort(() => Math.random() - 0.5);\n    let createdQuestion = {\n      num1,\n      operator,\n      num2,\n      result,\n      point: 2,\n      choices\n    };\n    return createdQuestion;\n  };\n\n  const checkAnswer = choice => {\n    var _questions$questionCo;\n\n    const isTrue = choice === ((_questions$questionCo = questions[questionCount]) === null || _questions$questionCo === void 0 ? void 0 : _questions$questionCo.result);\n\n    if (isTrue) {}\n  };\n\n  return /*#__PURE__*/_jsxDEV(Context.Provider, {\n    value: {\n      operator,\n      setOperator,\n      points,\n      setPoints,\n      tour,\n      setTour,\n      questions,\n      setQuestions,\n      questionCount,\n      setQuestionCount,\n      btnClicked,\n      setBtnClicked,\n      startGame,\n      createQuestions,\n      checkAnswer\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Provider, \"vuQVk230U+7oTjm6H0Msde1mick=\", false, function () {\n  return [useNavigate];\n});\n\n_c = Provider;\nexport default Provider;\n\nvar _c;\n\n$RefreshReg$(_c, \"Provider\");","map":{"version":3,"names":["React","createContext","useState","useNavigate","Context","Provider","props","operator","setOperator","points","setPoints","tour","setTour","questions","setQuestions","questionCount","setQuestionCount","btnClicked","setBtnClicked","navigate","startGame","createQuestions","newArr","i","push","addQuestion","randomNumber","lowerLimit","upperLimit","Math","floor","random","num1","num2","result","choicesArr","choices","sort","createdQuestion","point","checkAnswer","choice","isTrue","children"],"sources":["/home/merve/Desktop/math_game/src/context/Context.js"],"sourcesContent":["import React, { createContext } from 'react'\nimport { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nexport const Context = createContext();\n\n\nconst Provider = (props) => {\n\n    const [operator,setOperator] = useState(\"\");\n    const [points,setPoints] = useState(0);\n    const [tour,setTour] = useState(0);\n    const [questions,setQuestions] = useState([]);\n    const [questionCount, setQuestionCount] = useState(0);\n    const [btnClicked,setBtnClicked] = useState(null);\n\n    const navigate = useNavigate();\n\n    const startGame = () => {\n        if(!operator){\n        return;\n        }\n\n        if(operator){\n            setTour(tour+1);\n            navigate ('/play');\n        }\n    };\n\n\n\n    const createQuestions = (operator) => {\n        const newArr = []; \n\n        for (let i = 0; i < 10; i++) {\n          if (operator === 'add') {\n            newArr.push(addQuestion('add'));\n          } else if (operator === 'substract') {\n            // newArr.push(substractQuestion());\n          } else if (operator === 'multiply') {\n            // newArr.push(multiplyQuestion());\n          } else if (operator === 'divide') {\n            // newArr.push(divideQuestion());\n          }\n        }\n    \n        setQuestions(newArr);\n    };\n\n    const randomNumber = (lowerLimit,upperLimit) => {\n        return Math.floor(Math.random()*upperLimit)+lowerLimit;\n    };\n\n\n\n    //creating addition questions\n\n    const addQuestion = (operator) => {\n        let num1 = randomNumber(1,98);\n        let num2 = randomNumber(1,98-num1);\n        let result = num1 + num2;\n        let choicesArr=[result+2,result+5,result];\n        // console.log(choicesArr);\n        let choices= choicesArr.sort(() => Math.random() - 0.5);\n        let createdQuestion = { num1,operator,num2,result,point:2,choices}\n        return createdQuestion;\n    }\n\n    const checkAnswer = (choice) => {\n      const isTrue = choice === questions[questionCount]?.result;\n      \n      if(isTrue) {\n\n      }\n    }\n\n   \n\n    return(\n        <Context.Provider \n        value={{\n            operator,setOperator, \n            points,setPoints,\n            tour,setTour,\n            questions,setQuestions,\n            questionCount,setQuestionCount,\n            btnClicked,setBtnClicked,\n            startGame,\n            createQuestions,\n            checkAnswer\n        }}>\n            {props.children}\n        </Context.Provider>\n    )\n}\n\nexport default Provider;"],"mappings":"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"},"metadata":{},"sourceType":"module"}