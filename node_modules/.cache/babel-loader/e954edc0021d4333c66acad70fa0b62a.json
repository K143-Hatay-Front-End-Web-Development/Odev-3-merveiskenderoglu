{"ast":null,"code":"var _jsxFileName = \"/home/merve/Desktop/math_game/src/context/Context.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext } from 'react';\nimport { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Context = /*#__PURE__*/createContext();\n\nconst Provider = props => {\n  _s();\n\n  var _questions$questionCo, _questions$questionCo2;\n\n  const [operator, setOperator] = useState(\"\");\n  const [points, setPoints] = useState(0);\n  const [tour, setTour] = useState(0);\n  const [questions, setQuestions] = useState([]);\n  const [questionCount, setQuestionCount] = useState(0);\n  const [btnClicked, setBtnClicked] = useState(null);\n  const [btnId, setBtnId] = useState(null);\n  const [showQuestions, setShowQuestions] = useState([]);\n  const [trueAnswerCount, setTrueAnswerCount] = useState(0);\n  const [bgColor, setBgColor] = useState(\"2d2d2d\");\n  const navigate = useNavigate();\n\n  const startGame = () => {\n    if (!operator) {\n      return;\n    }\n\n    if (operator) {\n      setTour(tour + 1);\n      navigate('/play');\n    }\n  };\n\n  const createQuestions = operator => {\n    const newArr = [];\n\n    for (let i = 0; i < 10; i++) {\n      if (operator === 'add') {\n        newArr.push(addQuestion('add'));\n      } else if (operator === 'substract') {// newArr.push(substractQuestion());\n      } else if (operator === 'multiply') {// newArr.push(multiplyQuestion());\n      } else if (operator === 'divide') {// newArr.push(divideQuestion());\n      }\n    }\n\n    setQuestions(newArr);\n  };\n\n  const randomNumber = (lowerLimit, upperLimit) => {\n    return Math.floor(Math.random() * upperLimit) + lowerLimit;\n  }; //creating addition questions\n\n\n  const addQuestion = operator => {\n    let num1 = randomNumber(1, 98);\n    let num2 = randomNumber(1, 98 - num1);\n    let result = num1 + num2;\n    let choicesArr = [result + 2, result + 5, result]; // console.log(choicesArr);\n\n    let choices = choicesArr.sort(() => Math.random() - 0.5);\n    let createdQuestion = {\n      num1,\n      operator,\n      num2,\n      result,\n      point: 2,\n      choices\n    };\n    return createdQuestion;\n  };\n\n  let symbol;\n\n  switch (operator) {\n    case 'add':\n      symbol = '+';\n      break;\n\n    case 'substract':\n      symbol = '-';\n      break;\n\n    case 'multiply':\n      symbol = 'x';\n      break;\n\n    case 'divide':\n      symbol = '/';\n      break;\n  }\n\n  const boardQuestion = `${(_questions$questionCo = questions[questionCount]) === null || _questions$questionCo === void 0 ? void 0 : _questions$questionCo.num1} ${symbol} ${(_questions$questionCo2 = questions[questionCount]) === null || _questions$questionCo2 === void 0 ? void 0 : _questions$questionCo2.num2}`;\n\n  const checkAnswer = (choice, btnId) => {\n    var _questions$questionCo3;\n\n    const isTrue = choice === ((_questions$questionCo3 = questions[questionCount]) === null || _questions$questionCo3 === void 0 ? void 0 : _questions$questionCo3.result);\n    setBtnClicked(true);\n    setBtnId(btnId);\n\n    if (isTrue) {\n      setShowQuestions([...showQuestions, {\n        boardQuestion,\n        isAnswerTrue: true\n      }]);\n      setTrueAnswerCount(trueAnswerCount + 1);\n      setBgColor('green');\n    } else {\n      setShowQuestions([...showQuestions, {\n        boardQuestion,\n        isAnswerTrue: false\n      }]);\n      setBgColor('red');\n    }\n\n    setTimeout(() => {\n      if (isTrue) {\n        var _questions$questionCo4;\n\n        setPoints(points + ((_questions$questionCo4 = questions[questionCount]) === null || _questions$questionCo4 === void 0 ? void 0 : _questions$questionCo4.point));\n      }\n\n      setBgColor('#2d2d2d');\n      setCurrentNumber(currentNumber + 1);\n      setClickBtnId(null);\n      setIsClick(false);\n    }, 3000);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Context.Provider, {\n    value: {\n      operator,\n      setOperator,\n      points,\n      setPoints,\n      tour,\n      setTour,\n      questions,\n      setQuestions,\n      questionCount,\n      setQuestionCount,\n      btnClicked,\n      setBtnClicked,\n      btnId,\n      setBtnId,\n      bgColor,\n      startGame,\n      createQuestions,\n      checkAnswer,\n      boardQuestion\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Provider, \"xZiFrqjXDP1R5bZyuAYlInIYZ08=\", false, function () {\n  return [useNavigate];\n});\n\n_c = Provider;\nexport default Provider;\n\nvar _c;\n\n$RefreshReg$(_c, \"Provider\");","map":{"version":3,"names":["React","createContext","useState","useNavigate","Context","Provider","props","operator","setOperator","points","setPoints","tour","setTour","questions","setQuestions","questionCount","setQuestionCount","btnClicked","setBtnClicked","btnId","setBtnId","showQuestions","setShowQuestions","trueAnswerCount","setTrueAnswerCount","bgColor","setBgColor","navigate","startGame","createQuestions","newArr","i","push","addQuestion","randomNumber","lowerLimit","upperLimit","Math","floor","random","num1","num2","result","choicesArr","choices","sort","createdQuestion","point","symbol","boardQuestion","checkAnswer","choice","isTrue","isAnswerTrue","setTimeout","setCurrentNumber","currentNumber","setClickBtnId","setIsClick","children"],"sources":["/home/merve/Desktop/math_game/src/context/Context.js"],"sourcesContent":["import React, { createContext } from 'react'\nimport { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nexport const Context = createContext();\n\n\nconst Provider = (props) => {\n\n    const [operator,setOperator] = useState(\"\");\n    const [points,setPoints] = useState(0);\n    const [tour,setTour] = useState(0);\n    const [questions,setQuestions] = useState([]);\n    const [questionCount, setQuestionCount] = useState(0);\n    const [btnClicked,setBtnClicked] = useState(null);\n    const [btnId,setBtnId] = useState(null);\n    const [showQuestions, setShowQuestions] = useState([]);\n    const [trueAnswerCount,setTrueAnswerCount] = useState(0);\n    const [bgColor, setBgColor] = useState(\"2d2d2d\");\n\n    const navigate = useNavigate();\n\n    const startGame = () => {\n        if(!operator){\n        return;\n        }\n\n        if(operator){\n            setTour(tour+1);\n            navigate ('/play');\n        }\n    };\n\n\n\n    const createQuestions = (operator) => {\n        const newArr = []; \n\n        for (let i = 0; i < 10; i++) {\n          if (operator === 'add') {\n            newArr.push(addQuestion('add'));\n          } else if (operator === 'substract') {\n            // newArr.push(substractQuestion());\n          } else if (operator === 'multiply') {\n            // newArr.push(multiplyQuestion());\n          } else if (operator === 'divide') {\n            // newArr.push(divideQuestion());\n          }\n        }\n    \n        setQuestions(newArr);\n    };\n\n    const randomNumber = (lowerLimit,upperLimit) => {\n        return Math.floor(Math.random()*upperLimit)+lowerLimit;\n    };\n\n\n\n    //creating addition questions\n\n    const addQuestion = (operator) => {\n        let num1 = randomNumber(1,98);\n        let num2 = randomNumber(1,98-num1);\n        let result = num1 + num2;\n        let choicesArr=[result+2,result+5,result];\n        // console.log(choicesArr);\n        let choices= choicesArr.sort(() => Math.random() - 0.5);\n        let createdQuestion = { num1,operator,num2,result,point:2,choices}\n        return createdQuestion;\n    }\n\n    let symbol;\n\n  switch(operator){\n    case 'add':\n      symbol = '+'\n    break;\n    case 'substract':\n      symbol = '-'\n    break;\n    case 'multiply' :\n      symbol = 'x'\n    break;\n    case 'divide' :\n      symbol = '/'\n    break;\n  }\n\n\n\n\nconst boardQuestion = `${questions[questionCount]?.num1} ${symbol} ${questions[questionCount]?.num2}`\n\n    const checkAnswer = (choice, btnId) => {\n      const isTrue = choice === questions[questionCount]?.result;\n      setBtnClicked(true);\n      setBtnId(btnId);\n      \n      if (isTrue) { \n        setShowQuestions([...showQuestions, {\n            boardQuestion,\n            isAnswerTrue: true\n        }]);\n        setTrueAnswerCount(trueAnswerCount + 1);\n        setBgColor('green');\n    } else {\n        setShowQuestions([...showQuestions, {\n            boardQuestion,\n            isAnswerTrue: false\n        }]);\n        setBgColor('red');\n    }\n\n    setTimeout(() => {\n      if (isTrue) {\n          setPoints(points+ questions[questionCount]?.point);\n      }\n      setBgColor('#2d2d2d');\n      setCurrentNumber(currentNumber + 1);\n      setClickBtnId(null);\n      setIsClick(false);\n    }, 3000);\n    }\n\n   \n\n    return(\n        <Context.Provider \n        value={{\n            operator,setOperator, \n            points,setPoints,\n            tour,setTour,\n            questions,setQuestions,\n            questionCount,setQuestionCount,\n            btnClicked,setBtnClicked,\n            btnId,setBtnId,\n            bgColor,\n            startGame,\n            createQuestions,\n            checkAnswer,\n            boardQuestion\n        }}>\n            {props.children}\n        </Context.Provider>\n    )\n}\n\nexport default Provider;"],"mappings":"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"},"metadata":{},"sourceType":"module"}